// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// WorkbookCommentRequestBuilder is request builder for WorkbookComment
type WorkbookCommentRequestBuilder struct{ BaseRequestBuilder }

// Request returns WorkbookCommentRequest
func (b *WorkbookCommentRequestBuilder) Request() *WorkbookCommentRequest {
	return &WorkbookCommentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// WorkbookCommentRequest is request for WorkbookComment
type WorkbookCommentRequest struct{ BaseRequest }

// Get performs GET request for WorkbookComment
func (r *WorkbookCommentRequest) Get() (resObj *WorkbookComment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest("GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for WorkbookComment
func (r *WorkbookCommentRequest) Update(reqObj *WorkbookComment) error {
	return r.JSONRequest("PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for WorkbookComment
func (r *WorkbookCommentRequest) Delete() error {
	return r.JSONRequest("DELETE", "", nil, nil)
}

// Replies returns request builder for WorkbookCommentReply collection
func (b *WorkbookCommentRequestBuilder) Replies() *WorkbookCommentRepliesCollectionRequestBuilder {
	bb := &WorkbookCommentRepliesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/replies"
	return bb
}

// WorkbookCommentRepliesCollectionRequestBuilder is request builder for WorkbookCommentReply collection
type WorkbookCommentRepliesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WorkbookCommentReply collection
func (b *WorkbookCommentRepliesCollectionRequestBuilder) Request() *WorkbookCommentRepliesCollectionRequest {
	return &WorkbookCommentRepliesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WorkbookCommentReply item
func (b *WorkbookCommentRepliesCollectionRequestBuilder) ID(id string) *WorkbookCommentReplyRequestBuilder {
	bb := &WorkbookCommentReplyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WorkbookCommentRepliesCollectionRequest is request for WorkbookCommentReply collection
type WorkbookCommentRepliesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WorkbookCommentReply collection
func (r *WorkbookCommentRepliesCollectionRequest) Paging(method, path string, obj interface{}) ([]WorkbookCommentReply, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WorkbookCommentReply
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []WorkbookCommentReply
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for WorkbookCommentReply collection
func (r *WorkbookCommentRepliesCollectionRequest) Get() ([]WorkbookCommentReply, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for WorkbookCommentReply collection
func (r *WorkbookCommentRepliesCollectionRequest) Add(reqObj *WorkbookCommentReply) (resObj *WorkbookCommentReply, err error) {
	err = r.JSONRequest("POST", "", reqObj, &resObj)
	return
}
