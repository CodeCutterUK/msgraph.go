// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strconv"
)

const (
	defaultBaseURL = "https://graph.microsoft.com/v1.0"
)

// Binary undocumented
type Binary []byte

// Stream undocumented
type Stream []byte

// UUID undocumented
type UUID string

// Paging undocumented
type Paging struct {
	NextLink string          `json:"@odata.nextLink"`
	Value    json.RawMessage `json:"value"`
}

// BaseRequestBuilder
type BaseRequestBuilder struct {
	baseURL       string
	client        *http.Client
	requestObject interface{}
}

// BaseRequest
type BaseRequest struct {
	baseURL       string
	client        *http.Client
	requestObject interface{}
	query         url.Values
}

// URL undocumented
func (r *BaseRequest) URL() string {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.baseURL + query
}

// Client undocumented
func (r *BaseRequest) Client() *http.Client {
	return r.client
}

// Query
func (r *BaseRequest) Query() url.Values {
	return r.query
}

func (r *BaseRequest) Expand(value string) {
	if r.query == nil {
		r.query = url.Values{}
	}
	r.query.Add("$expand", value)
}

func (r *BaseRequest) Select(value string) {
	if r.query == nil {
		r.query = url.Values{}
	}
	r.query.Add("$select", value)
}

func (r *BaseRequest) Top(value int) {
	if r.query == nil {
		r.query = url.Values{}
	}
	r.query.Add("$top", strconv.Itoa(value))
}

func (r *BaseRequest) Filter(value string) {
	if r.query == nil {
		r.query = url.Values{}
	}
	r.query.Add("$filter", value)
}

func (r *BaseRequest) Skip(value int) {
	if r.query == nil {
		r.query = url.Values{}
	}
	r.query.Add("$skip", strconv.Itoa(value))
}

func (r *BaseRequest) OrderBy(value string) {
	if r.query == nil {
		r.query = url.Values{}
	}
	r.query.Add("$orderby", value)
}

// NewRequest returns a new http.Request
func (r *BaseRequest) NewRequest(method string, body io.Reader) (*http.Request, error) {
	return http.NewRequest(method, r.baseURL, body)
}

// NewRequestWithPath returns a new http.Request with path
func (r *BaseRequest) NewRequestWithPath(method, path string, body io.Reader) (*http.Request, error) {
	return http.NewRequest(method, r.baseURL+path, body)
}

// NewJSONRequestWithPath returns a new http.Request with path and JSON payload
func (r *BaseRequest) NewJSONRequestWithPath(method, path string, obj interface{}) (*http.Request, error) {
	buf := &bytes.Buffer{}
	if obj != nil {
		err := json.NewEncoder(buf).Encode(obj)
		if err != nil {
			return nil, err
		}
	}
	req, err := http.NewRequest(method, r.baseURL+path, buf)
	if err != nil {
		return nil, err
	}
	if obj != nil {
		req.Header.Add("Content-Type", "application/json")
	}
	return req, nil
}

// DecodeJSONResponse decodes a http.Response with JSON payload
func (r *BaseRequest) DecodeJSONResponse(res *http.Response, obj interface{}) error {
	switch res.StatusCode {
	case http.StatusOK, http.StatusCreated:
		if obj != nil {
			err := json.NewDecoder(res.Body).Decode(obj)
			if err != nil {
				return err
			}
		}
		return nil
	case http.StatusNoContent:
		return nil
	default:
		b, _ := ioutil.ReadAll(res.Body)
		return fmt.Errorf("%s: %s", res.Status, string(b))
	}
}

// JSONRequestWithPath issues a JSON HTTP Request
func (r *BaseRequest) JSONRequestWithPath(method, path string, reqObj, resObj interface{}) error {
	req, err := r.NewJSONRequestWithPath(method, path, reqObj)
	if err != nil {
		return err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return err
	}
	defer res.Body.Close()
	return r.DecodeJSONResponse(res, resObj)
}

//
type GraphServiceRequestBuilder struct {
	BaseRequestBuilder
}

//
func NewClient(cli *http.Client) *GraphServiceRequestBuilder {
	return &GraphServiceRequestBuilder{
		BaseRequestBuilder: BaseRequestBuilder{baseURL: defaultBaseURL, client: cli},
	}
}
