{{- $ := . }}
{{- $x := .X }}
{{- $y := .Y }}
{{- $xSymName := $.SymFromName $x.Name }}
{{- $ySymName := $.SymFromName $y.Name }}
{{- $ySymType := $.SymFromType $y.Type }}
//
func (b *{{$xSymName}}RequestBuilder) {{$ySymName}}() *{{$xSymName}}{{$ySymName}}CollectionRequestBuilder {
	bb := &{{$xSymName}}{{$ySymName}}CollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/{{$y.Name}}"
	return bb
}

//
type {{$xSymName}}{{$ySymName}}CollectionRequestBuilder struct{ BaseRequestBuilder }

//
func (b *{{$xSymName}}{{$ySymName}}CollectionRequestBuilder) Request() *{{$xSymName}}{{$ySymName}}CollectionRequest {
    return &{{$xSymName}}{{$ySymName}}CollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

//
func (b *{{$xSymName}}{{$ySymName}}CollectionRequestBuilder) ID(id string) *{{$ySymType}}RequestBuilder {
	bb := &{{$ySymType}}RequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

//
type {{$xSymName}}{{$ySymName}}CollectionRequest struct{ BaseRequest }

//
func (r *{{$xSymName}}{{$ySymName}}CollectionRequest) Do(method, path string, reqObj interface{}) (resObj *{{$ySymType}}, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

//
func (r *{{$xSymName}}{{$ySymName}}CollectionRequest) Paging(method, path string, obj interface{}) ([]{{$ySymType}}, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []{{$ySymType}}
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []{{$ySymType}}
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *{{$xSymName}}{{$ySymName}}CollectionRequest) Get() ([]{{$ySymType}}, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

//
func (r *{{$xSymName}}{{$ySymName}}CollectionRequest) Add(reqObj *{{$ySymType}}) (*{{$ySymType}}, error) {
	return r.Do("POST", "", reqObj)
}
