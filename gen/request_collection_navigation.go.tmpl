{{- $ := . }}
{{- $x := .X }}
{{- $y := .Y }}
{{- $ySymType := $.SymBaseType $y.Type }}
// {{$y.Sym}} returns request builder for {{$ySymType}} collection
func (b *{{$x.Sym}}RequestBuilder) {{$y.Sym}}() *{{$x.Sym}}{{$y.Sym}}CollectionRequestBuilder {
	bb := &{{$x.Sym}}{{$y.Sym}}CollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/{{$y.Name}}"
	return bb
}

// {{$x.Sym}}{{$y.Sym}}CollectionRequestBuilder is request builder for {{$ySymType}} collection
type {{$x.Sym}}{{$y.Sym}}CollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for {{$ySymType}} collection
func (b *{{$x.Sym}}{{$y.Sym}}CollectionRequestBuilder) Request() *{{$x.Sym}}{{$y.Sym}}CollectionRequest {
    return &{{$x.Sym}}{{$y.Sym}}CollectionRequest{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client },
    }
}

// ID returns request builder for {{$ySymType}} item
func (b *{{$x.Sym}}{{$y.Sym}}CollectionRequestBuilder) ID(id string) *{{$ySymType}}RequestBuilder {
	bb := &{{$ySymType}}RequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// {{$x.Sym}}{{$y.Sym}}CollectionRequest is request for {{$ySymType}} collection
type {{$x.Sym}}{{$y.Sym}}CollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for {{$ySymType}} collection
func (r *{{$x.Sym}}{{$y.Sym}}CollectionRequest) Paging(method, path string, obj interface{}) ([]{{$ySymType}}, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []{{$ySymType}}
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []{{$ySymType}}
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for {{$ySymType}} collection
func (r *{{$x.Sym}}{{$y.Sym}}CollectionRequest) Get() ([]{{$ySymType}}, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for {{$ySymType}} collection
func (r *{{$x.Sym}}{{$y.Sym}}CollectionRequest) Add(reqObj *{{$ySymType}}) (resObj *{{$ySymType}}, err error) {
	err = r.JSONRequest("POST", "", reqObj, &resObj)
	return
}
