{{- $ := . }}
{{- $y := .Y }}
{{- $ySymBindingType := $.SymFromType $y.BindingParameterType }}
{{- $yTypeType := $.TypeFromType $y.ReturnType }}
//
type {{$ySymBindingType}}{{$y.Sym}}RequestBuilder struct { BaseRequestBuilder }

{{- range $x := .X }}
// {{$y.Sym}} action {{$y.Description}}
func (b *{{$x}}RequestBuilder) {{$y.Sym}}(reqObj *{{$ySymBindingType}}{{$y.Sym}}RequestParameter) *{{$ySymBindingType}}{{$y.Sym}}RequestBuilder {
    bb := &{{$ySymBindingType}}{{$y.Sym}}RequestBuilder {BaseRequestBuilder: b.BaseRequestBuilder}
    bb.BaseRequestBuilder.baseURL += "/{{$y.Name}}"
    bb.BaseRequestBuilder.requestObject = reqObj
    return bb
}
{{- end }}

//
type {{$ySymBindingType}}{{$y.Sym}}Request struct { BaseRequest }

//
func (b *{{$ySymBindingType}}{{$y.Sym}}RequestBuilder) Request() *{{$ySymBindingType}}{{$y.Sym}}Request {
    return &{{$ySymBindingType}}{{$y.Sym}}Request{
        BaseRequest: BaseRequest{ baseURL: b.baseURL, client:  b.client, requestObject: b.requestObject },
    }
}

//
func (r *{{$ySymBindingType}}{{$y.Sym}}Request) Paging(method, path string, obj interface{}) ([]{{$yTypeType}}, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []{{$yTypeType}}
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []{{$yTypeType}}
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *{{$ySymBindingType}}{{$y.Sym}}Request) Get() ([]{{$yTypeType}}, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}
