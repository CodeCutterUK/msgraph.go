// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// ChannelRequestBuilder is request builder for Channel
type ChannelRequestBuilder struct{ BaseRequestBuilder }

// Request returns ChannelRequest
func (b *ChannelRequestBuilder) Request() *ChannelRequest {
	return &ChannelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ChannelRequest is request for Channel
type ChannelRequest struct{ BaseRequest }

// Do performs HTTP request for Channel
func (r *ChannelRequest) Do(method, path string, reqObj interface{}) (resObj *Channel, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for Channel
func (r *ChannelRequest) Get() (*Channel, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for Channel
func (r *ChannelRequest) Update(reqObj *Channel) (*Channel, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for Channel
func (r *ChannelRequest) Delete() error {
	return r.JSONRequestWithPath("DELETE", "", nil, nil)
}

// ChatThreads returns request builder for ChatThread collection
func (b *ChannelRequestBuilder) ChatThreads() *ChannelChatThreadsCollectionRequestBuilder {
	bb := &ChannelChatThreadsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/chatThreads"
	return bb
}

// ChannelChatThreadsCollectionRequestBuilder is request builder for ChatThread collection
type ChannelChatThreadsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ChatThread collection
func (b *ChannelChatThreadsCollectionRequestBuilder) Request() *ChannelChatThreadsCollectionRequest {
	return &ChannelChatThreadsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ChatThread item
func (b *ChannelChatThreadsCollectionRequestBuilder) ID(id string) *ChatThreadRequestBuilder {
	bb := &ChatThreadRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ChannelChatThreadsCollectionRequest is request for ChatThread collection
type ChannelChatThreadsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for ChatThread collection
func (r *ChannelChatThreadsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *ChatThread, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for ChatThread collection
func (r *ChannelChatThreadsCollectionRequest) Paging(method, path string, obj interface{}) ([]ChatThread, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ChatThread
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []ChatThread
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for ChatThread collection
func (r *ChannelChatThreadsCollectionRequest) Get() ([]ChatThread, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for ChatThread collection
func (r *ChannelChatThreadsCollectionRequest) Add(reqObj *ChatThread) (*ChatThread, error) {
	return r.Do("POST", "", reqObj)
}

// FilesFolder is navigation property
func (b *ChannelRequestBuilder) FilesFolder() *DriveItemRequestBuilder {
	bb := &DriveItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/filesFolder"
	return bb
}

// Members returns request builder for ConversationMember collection
func (b *ChannelRequestBuilder) Members() *ChannelMembersCollectionRequestBuilder {
	bb := &ChannelMembersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/members"
	return bb
}

// ChannelMembersCollectionRequestBuilder is request builder for ConversationMember collection
type ChannelMembersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ConversationMember collection
func (b *ChannelMembersCollectionRequestBuilder) Request() *ChannelMembersCollectionRequest {
	return &ChannelMembersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ConversationMember item
func (b *ChannelMembersCollectionRequestBuilder) ID(id string) *ConversationMemberRequestBuilder {
	bb := &ConversationMemberRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ChannelMembersCollectionRequest is request for ConversationMember collection
type ChannelMembersCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for ConversationMember collection
func (r *ChannelMembersCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *ConversationMember, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for ConversationMember collection
func (r *ChannelMembersCollectionRequest) Paging(method, path string, obj interface{}) ([]ConversationMember, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ConversationMember
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []ConversationMember
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for ConversationMember collection
func (r *ChannelMembersCollectionRequest) Get() ([]ConversationMember, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for ConversationMember collection
func (r *ChannelMembersCollectionRequest) Add(reqObj *ConversationMember) (*ConversationMember, error) {
	return r.Do("POST", "", reqObj)
}

// Messages returns request builder for ChatMessage collection
func (b *ChannelRequestBuilder) Messages() *ChannelMessagesCollectionRequestBuilder {
	bb := &ChannelMessagesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/messages"
	return bb
}

// ChannelMessagesCollectionRequestBuilder is request builder for ChatMessage collection
type ChannelMessagesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ChatMessage collection
func (b *ChannelMessagesCollectionRequestBuilder) Request() *ChannelMessagesCollectionRequest {
	return &ChannelMessagesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ChatMessage item
func (b *ChannelMessagesCollectionRequestBuilder) ID(id string) *ChatMessageRequestBuilder {
	bb := &ChatMessageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ChannelMessagesCollectionRequest is request for ChatMessage collection
type ChannelMessagesCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for ChatMessage collection
func (r *ChannelMessagesCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *ChatMessage, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for ChatMessage collection
func (r *ChannelMessagesCollectionRequest) Paging(method, path string, obj interface{}) ([]ChatMessage, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ChatMessage
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []ChatMessage
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for ChatMessage collection
func (r *ChannelMessagesCollectionRequest) Get() ([]ChatMessage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for ChatMessage collection
func (r *ChannelMessagesCollectionRequest) Add(reqObj *ChatMessage) (*ChatMessage, error) {
	return r.Do("POST", "", reqObj)
}

// Tabs returns request builder for TeamsTab collection
func (b *ChannelRequestBuilder) Tabs() *ChannelTabsCollectionRequestBuilder {
	bb := &ChannelTabsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/tabs"
	return bb
}

// ChannelTabsCollectionRequestBuilder is request builder for TeamsTab collection
type ChannelTabsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for TeamsTab collection
func (b *ChannelTabsCollectionRequestBuilder) Request() *ChannelTabsCollectionRequest {
	return &ChannelTabsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for TeamsTab item
func (b *ChannelTabsCollectionRequestBuilder) ID(id string) *TeamsTabRequestBuilder {
	bb := &TeamsTabRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ChannelTabsCollectionRequest is request for TeamsTab collection
type ChannelTabsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for TeamsTab collection
func (r *ChannelTabsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *TeamsTab, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for TeamsTab collection
func (r *ChannelTabsCollectionRequest) Paging(method, path string, obj interface{}) ([]TeamsTab, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TeamsTab
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []TeamsTab
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for TeamsTab collection
func (r *ChannelTabsCollectionRequest) Get() ([]TeamsTab, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for TeamsTab collection
func (r *ChannelTabsCollectionRequest) Add(reqObj *TeamsTab) (*TeamsTab, error) {
	return r.Do("POST", "", reqObj)
}
