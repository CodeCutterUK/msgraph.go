// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// SalesCreditMemoRequestBuilder is request builder for SalesCreditMemo
type SalesCreditMemoRequestBuilder struct{ BaseRequestBuilder }

// Request returns SalesCreditMemoRequest
func (b *SalesCreditMemoRequestBuilder) Request() *SalesCreditMemoRequest {
	return &SalesCreditMemoRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// SalesCreditMemoRequest is request for SalesCreditMemo
type SalesCreditMemoRequest struct{ BaseRequest }

// Do performs HTTP request for SalesCreditMemo
func (r *SalesCreditMemoRequest) Do(method, path string, reqObj interface{}) (resObj *SalesCreditMemo, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for SalesCreditMemo
func (r *SalesCreditMemoRequest) Get() (*SalesCreditMemo, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for SalesCreditMemo
func (r *SalesCreditMemoRequest) Update(reqObj *SalesCreditMemo) (*SalesCreditMemo, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for SalesCreditMemo
func (r *SalesCreditMemoRequest) Delete() error {
	return r.JSONRequestWithPath("DELETE", "", nil, nil)
}

// Currency is navigation property
func (b *SalesCreditMemoRequestBuilder) Currency() *CurrencyRequestBuilder {
	bb := &CurrencyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/currency"
	return bb
}

// Customer is navigation property
func (b *SalesCreditMemoRequestBuilder) Customer() *CustomerRequestBuilder {
	bb := &CustomerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/customer"
	return bb
}

// PaymentTerm is navigation property
func (b *SalesCreditMemoRequestBuilder) PaymentTerm() *PaymentTermRequestBuilder {
	bb := &PaymentTermRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/paymentTerm"
	return bb
}

// SalesCreditMemoLines returns request builder for SalesCreditMemoLine collection
func (b *SalesCreditMemoRequestBuilder) SalesCreditMemoLines() *SalesCreditMemoSalesCreditMemoLinesCollectionRequestBuilder {
	bb := &SalesCreditMemoSalesCreditMemoLinesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/salesCreditMemoLines"
	return bb
}

// SalesCreditMemoSalesCreditMemoLinesCollectionRequestBuilder is request builder for SalesCreditMemoLine collection
type SalesCreditMemoSalesCreditMemoLinesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SalesCreditMemoLine collection
func (b *SalesCreditMemoSalesCreditMemoLinesCollectionRequestBuilder) Request() *SalesCreditMemoSalesCreditMemoLinesCollectionRequest {
	return &SalesCreditMemoSalesCreditMemoLinesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SalesCreditMemoLine item
func (b *SalesCreditMemoSalesCreditMemoLinesCollectionRequestBuilder) ID(id string) *SalesCreditMemoLineRequestBuilder {
	bb := &SalesCreditMemoLineRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SalesCreditMemoSalesCreditMemoLinesCollectionRequest is request for SalesCreditMemoLine collection
type SalesCreditMemoSalesCreditMemoLinesCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for SalesCreditMemoLine collection
func (r *SalesCreditMemoSalesCreditMemoLinesCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *SalesCreditMemoLine, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for SalesCreditMemoLine collection
func (r *SalesCreditMemoSalesCreditMemoLinesCollectionRequest) Paging(method, path string, obj interface{}) ([]SalesCreditMemoLine, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SalesCreditMemoLine
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []SalesCreditMemoLine
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for SalesCreditMemoLine collection
func (r *SalesCreditMemoSalesCreditMemoLinesCollectionRequest) Get() ([]SalesCreditMemoLine, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for SalesCreditMemoLine collection
func (r *SalesCreditMemoSalesCreditMemoLinesCollectionRequest) Add(reqObj *SalesCreditMemoLine) (*SalesCreditMemoLine, error) {
	return r.Do("POST", "", reqObj)
}
