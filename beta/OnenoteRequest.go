// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// OnenoteRequestBuilder is request builder for Onenote
type OnenoteRequestBuilder struct{ BaseRequestBuilder }

// Request returns OnenoteRequest
func (b *OnenoteRequestBuilder) Request() *OnenoteRequest {
	return &OnenoteRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// OnenoteRequest is request for Onenote
type OnenoteRequest struct{ BaseRequest }

// Do performs HTTP request for Onenote
func (r *OnenoteRequest) Do(method, path string, reqObj interface{}) (resObj *Onenote, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for Onenote
func (r *OnenoteRequest) Get() (*Onenote, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for Onenote
func (r *OnenoteRequest) Update(reqObj *Onenote) (*Onenote, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for Onenote
func (r *OnenoteRequest) Delete() error {
	return r.JSONRequest("DELETE", "", nil, nil)
}

// Notebooks returns request builder for Notebook collection
func (b *OnenoteRequestBuilder) Notebooks() *OnenoteNotebooksCollectionRequestBuilder {
	bb := &OnenoteNotebooksCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/notebooks"
	return bb
}

// OnenoteNotebooksCollectionRequestBuilder is request builder for Notebook collection
type OnenoteNotebooksCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Notebook collection
func (b *OnenoteNotebooksCollectionRequestBuilder) Request() *OnenoteNotebooksCollectionRequest {
	return &OnenoteNotebooksCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Notebook item
func (b *OnenoteNotebooksCollectionRequestBuilder) ID(id string) *NotebookRequestBuilder {
	bb := &NotebookRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// OnenoteNotebooksCollectionRequest is request for Notebook collection
type OnenoteNotebooksCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for Notebook collection
func (r *OnenoteNotebooksCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *Notebook, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for Notebook collection
func (r *OnenoteNotebooksCollectionRequest) Paging(method, path string, obj interface{}) ([]Notebook, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Notebook
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []Notebook
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for Notebook collection
func (r *OnenoteNotebooksCollectionRequest) Get() ([]Notebook, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for Notebook collection
func (r *OnenoteNotebooksCollectionRequest) Add(reqObj *Notebook) (*Notebook, error) {
	return r.Do("POST", "", reqObj)
}

// Operations returns request builder for OnenoteOperation collection
func (b *OnenoteRequestBuilder) Operations() *OnenoteOperationsCollectionRequestBuilder {
	bb := &OnenoteOperationsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/operations"
	return bb
}

// OnenoteOperationsCollectionRequestBuilder is request builder for OnenoteOperation collection
type OnenoteOperationsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for OnenoteOperation collection
func (b *OnenoteOperationsCollectionRequestBuilder) Request() *OnenoteOperationsCollectionRequest {
	return &OnenoteOperationsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for OnenoteOperation item
func (b *OnenoteOperationsCollectionRequestBuilder) ID(id string) *OnenoteOperationRequestBuilder {
	bb := &OnenoteOperationRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// OnenoteOperationsCollectionRequest is request for OnenoteOperation collection
type OnenoteOperationsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for OnenoteOperation collection
func (r *OnenoteOperationsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *OnenoteOperation, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for OnenoteOperation collection
func (r *OnenoteOperationsCollectionRequest) Paging(method, path string, obj interface{}) ([]OnenoteOperation, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []OnenoteOperation
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []OnenoteOperation
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for OnenoteOperation collection
func (r *OnenoteOperationsCollectionRequest) Get() ([]OnenoteOperation, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for OnenoteOperation collection
func (r *OnenoteOperationsCollectionRequest) Add(reqObj *OnenoteOperation) (*OnenoteOperation, error) {
	return r.Do("POST", "", reqObj)
}

// Pages returns request builder for OnenotePage collection
func (b *OnenoteRequestBuilder) Pages() *OnenotePagesCollectionRequestBuilder {
	bb := &OnenotePagesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/pages"
	return bb
}

// OnenotePagesCollectionRequestBuilder is request builder for OnenotePage collection
type OnenotePagesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for OnenotePage collection
func (b *OnenotePagesCollectionRequestBuilder) Request() *OnenotePagesCollectionRequest {
	return &OnenotePagesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for OnenotePage item
func (b *OnenotePagesCollectionRequestBuilder) ID(id string) *OnenotePageRequestBuilder {
	bb := &OnenotePageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// OnenotePagesCollectionRequest is request for OnenotePage collection
type OnenotePagesCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for OnenotePage collection
func (r *OnenotePagesCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *OnenotePage, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for OnenotePage collection
func (r *OnenotePagesCollectionRequest) Paging(method, path string, obj interface{}) ([]OnenotePage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []OnenotePage
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []OnenotePage
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for OnenotePage collection
func (r *OnenotePagesCollectionRequest) Get() ([]OnenotePage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for OnenotePage collection
func (r *OnenotePagesCollectionRequest) Add(reqObj *OnenotePage) (*OnenotePage, error) {
	return r.Do("POST", "", reqObj)
}

// Resources returns request builder for OnenoteResource collection
func (b *OnenoteRequestBuilder) Resources() *OnenoteResourcesCollectionRequestBuilder {
	bb := &OnenoteResourcesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resources"
	return bb
}

// OnenoteResourcesCollectionRequestBuilder is request builder for OnenoteResource collection
type OnenoteResourcesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for OnenoteResource collection
func (b *OnenoteResourcesCollectionRequestBuilder) Request() *OnenoteResourcesCollectionRequest {
	return &OnenoteResourcesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for OnenoteResource item
func (b *OnenoteResourcesCollectionRequestBuilder) ID(id string) *OnenoteResourceRequestBuilder {
	bb := &OnenoteResourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// OnenoteResourcesCollectionRequest is request for OnenoteResource collection
type OnenoteResourcesCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for OnenoteResource collection
func (r *OnenoteResourcesCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *OnenoteResource, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for OnenoteResource collection
func (r *OnenoteResourcesCollectionRequest) Paging(method, path string, obj interface{}) ([]OnenoteResource, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []OnenoteResource
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []OnenoteResource
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for OnenoteResource collection
func (r *OnenoteResourcesCollectionRequest) Get() ([]OnenoteResource, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for OnenoteResource collection
func (r *OnenoteResourcesCollectionRequest) Add(reqObj *OnenoteResource) (*OnenoteResource, error) {
	return r.Do("POST", "", reqObj)
}

// SectionGroups returns request builder for SectionGroup collection
func (b *OnenoteRequestBuilder) SectionGroups() *OnenoteSectionGroupsCollectionRequestBuilder {
	bb := &OnenoteSectionGroupsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sectionGroups"
	return bb
}

// OnenoteSectionGroupsCollectionRequestBuilder is request builder for SectionGroup collection
type OnenoteSectionGroupsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SectionGroup collection
func (b *OnenoteSectionGroupsCollectionRequestBuilder) Request() *OnenoteSectionGroupsCollectionRequest {
	return &OnenoteSectionGroupsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SectionGroup item
func (b *OnenoteSectionGroupsCollectionRequestBuilder) ID(id string) *SectionGroupRequestBuilder {
	bb := &SectionGroupRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// OnenoteSectionGroupsCollectionRequest is request for SectionGroup collection
type OnenoteSectionGroupsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for SectionGroup collection
func (r *OnenoteSectionGroupsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *SectionGroup, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for SectionGroup collection
func (r *OnenoteSectionGroupsCollectionRequest) Paging(method, path string, obj interface{}) ([]SectionGroup, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SectionGroup
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []SectionGroup
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for SectionGroup collection
func (r *OnenoteSectionGroupsCollectionRequest) Get() ([]SectionGroup, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for SectionGroup collection
func (r *OnenoteSectionGroupsCollectionRequest) Add(reqObj *SectionGroup) (*SectionGroup, error) {
	return r.Do("POST", "", reqObj)
}

// Sections returns request builder for OnenoteSection collection
func (b *OnenoteRequestBuilder) Sections() *OnenoteSectionsCollectionRequestBuilder {
	bb := &OnenoteSectionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sections"
	return bb
}

// OnenoteSectionsCollectionRequestBuilder is request builder for OnenoteSection collection
type OnenoteSectionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for OnenoteSection collection
func (b *OnenoteSectionsCollectionRequestBuilder) Request() *OnenoteSectionsCollectionRequest {
	return &OnenoteSectionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for OnenoteSection item
func (b *OnenoteSectionsCollectionRequestBuilder) ID(id string) *OnenoteSectionRequestBuilder {
	bb := &OnenoteSectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// OnenoteSectionsCollectionRequest is request for OnenoteSection collection
type OnenoteSectionsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for OnenoteSection collection
func (r *OnenoteSectionsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *OnenoteSection, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for OnenoteSection collection
func (r *OnenoteSectionsCollectionRequest) Paging(method, path string, obj interface{}) ([]OnenoteSection, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []OnenoteSection
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []OnenoteSection
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for OnenoteSection collection
func (r *OnenoteSectionsCollectionRequest) Get() ([]OnenoteSection, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for OnenoteSection collection
func (r *OnenoteSectionsCollectionRequest) Add(reqObj *OnenoteSection) (*OnenoteSection, error) {
	return r.Do("POST", "", reqObj)
}
