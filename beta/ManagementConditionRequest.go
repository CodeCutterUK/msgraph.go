// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// ManagementConditionRequestBuilder is request builder for ManagementCondition
type ManagementConditionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ManagementConditionRequest
func (b *ManagementConditionRequestBuilder) Request() *ManagementConditionRequest {
	return &ManagementConditionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ManagementConditionRequest is request for ManagementCondition
type ManagementConditionRequest struct{ BaseRequest }

// Do performs HTTP request for ManagementCondition
func (r *ManagementConditionRequest) Do(method, path string, reqObj interface{}) (resObj *ManagementCondition, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for ManagementCondition
func (r *ManagementConditionRequest) Get() (*ManagementCondition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for ManagementCondition
func (r *ManagementConditionRequest) Update(reqObj *ManagementCondition) (*ManagementCondition, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for ManagementCondition
func (r *ManagementConditionRequest) Delete() error {
	return r.JSONRequest("DELETE", "", nil, nil)
}

// ManagementConditionStatements returns request builder for ManagementConditionStatement collection
func (b *ManagementConditionRequestBuilder) ManagementConditionStatements() *ManagementConditionManagementConditionStatementsCollectionRequestBuilder {
	bb := &ManagementConditionManagementConditionStatementsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementConditionStatements"
	return bb
}

// ManagementConditionManagementConditionStatementsCollectionRequestBuilder is request builder for ManagementConditionStatement collection
type ManagementConditionManagementConditionStatementsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagementConditionStatement collection
func (b *ManagementConditionManagementConditionStatementsCollectionRequestBuilder) Request() *ManagementConditionManagementConditionStatementsCollectionRequest {
	return &ManagementConditionManagementConditionStatementsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagementConditionStatement item
func (b *ManagementConditionManagementConditionStatementsCollectionRequestBuilder) ID(id string) *ManagementConditionStatementRequestBuilder {
	bb := &ManagementConditionStatementRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagementConditionManagementConditionStatementsCollectionRequest is request for ManagementConditionStatement collection
type ManagementConditionManagementConditionStatementsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for ManagementConditionStatement collection
func (r *ManagementConditionManagementConditionStatementsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *ManagementConditionStatement, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for ManagementConditionStatement collection
func (r *ManagementConditionManagementConditionStatementsCollectionRequest) Paging(method, path string, obj interface{}) ([]ManagementConditionStatement, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagementConditionStatement
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []ManagementConditionStatement
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for ManagementConditionStatement collection
func (r *ManagementConditionManagementConditionStatementsCollectionRequest) Get() ([]ManagementConditionStatement, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for ManagementConditionStatement collection
func (r *ManagementConditionManagementConditionStatementsCollectionRequest) Add(reqObj *ManagementConditionStatement) (*ManagementConditionStatement, error) {
	return r.Do("POST", "", reqObj)
}
