// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// ChatMessageRequestBuilder is request builder for ChatMessage
type ChatMessageRequestBuilder struct{ BaseRequestBuilder }

// Request returns ChatMessageRequest
func (b *ChatMessageRequestBuilder) Request() *ChatMessageRequest {
	return &ChatMessageRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ChatMessageRequest is request for ChatMessage
type ChatMessageRequest struct{ BaseRequest }

// Do performs HTTP request for ChatMessage
func (r *ChatMessageRequest) Do(method, path string, reqObj interface{}) (resObj *ChatMessage, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for ChatMessage
func (r *ChatMessageRequest) Get() (*ChatMessage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for ChatMessage
func (r *ChatMessageRequest) Update(reqObj *ChatMessage) (*ChatMessage, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for ChatMessage
func (r *ChatMessageRequest) Delete() error {
	return r.JSONRequestWithPath("DELETE", "", nil, nil)
}

// HostedContents returns request builder for ChatMessageHostedContent collection
func (b *ChatMessageRequestBuilder) HostedContents() *ChatMessageHostedContentsCollectionRequestBuilder {
	bb := &ChatMessageHostedContentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/hostedContents"
	return bb
}

// ChatMessageHostedContentsCollectionRequestBuilder is request builder for ChatMessageHostedContent collection
type ChatMessageHostedContentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ChatMessageHostedContent collection
func (b *ChatMessageHostedContentsCollectionRequestBuilder) Request() *ChatMessageHostedContentsCollectionRequest {
	return &ChatMessageHostedContentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ChatMessageHostedContent item
func (b *ChatMessageHostedContentsCollectionRequestBuilder) ID(id string) *ChatMessageHostedContentRequestBuilder {
	bb := &ChatMessageHostedContentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ChatMessageHostedContentsCollectionRequest is request for ChatMessageHostedContent collection
type ChatMessageHostedContentsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for ChatMessageHostedContent collection
func (r *ChatMessageHostedContentsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *ChatMessageHostedContent, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for ChatMessageHostedContent collection
func (r *ChatMessageHostedContentsCollectionRequest) Paging(method, path string, obj interface{}) ([]ChatMessageHostedContent, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ChatMessageHostedContent
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []ChatMessageHostedContent
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for ChatMessageHostedContent collection
func (r *ChatMessageHostedContentsCollectionRequest) Get() ([]ChatMessageHostedContent, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for ChatMessageHostedContent collection
func (r *ChatMessageHostedContentsCollectionRequest) Add(reqObj *ChatMessageHostedContent) (*ChatMessageHostedContent, error) {
	return r.Do("POST", "", reqObj)
}

// Replies returns request builder for ChatMessage collection
func (b *ChatMessageRequestBuilder) Replies() *ChatMessageRepliesCollectionRequestBuilder {
	bb := &ChatMessageRepliesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/replies"
	return bb
}

// ChatMessageRepliesCollectionRequestBuilder is request builder for ChatMessage collection
type ChatMessageRepliesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ChatMessage collection
func (b *ChatMessageRepliesCollectionRequestBuilder) Request() *ChatMessageRepliesCollectionRequest {
	return &ChatMessageRepliesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ChatMessage item
func (b *ChatMessageRepliesCollectionRequestBuilder) ID(id string) *ChatMessageRequestBuilder {
	bb := &ChatMessageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ChatMessageRepliesCollectionRequest is request for ChatMessage collection
type ChatMessageRepliesCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for ChatMessage collection
func (r *ChatMessageRepliesCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *ChatMessage, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for ChatMessage collection
func (r *ChatMessageRepliesCollectionRequest) Paging(method, path string, obj interface{}) ([]ChatMessage, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ChatMessage
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []ChatMessage
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for ChatMessage collection
func (r *ChatMessageRepliesCollectionRequest) Get() ([]ChatMessage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for ChatMessage collection
func (r *ChatMessageRepliesCollectionRequest) Add(reqObj *ChatMessage) (*ChatMessage, error) {
	return r.Do("POST", "", reqObj)
}
