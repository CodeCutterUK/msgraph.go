// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// MacOsVppAppRequestBuilder is request builder for MacOsVppApp
type MacOsVppAppRequestBuilder struct{ BaseRequestBuilder }

// Request returns MacOsVppAppRequest
func (b *MacOsVppAppRequestBuilder) Request() *MacOsVppAppRequest {
	return &MacOsVppAppRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MacOsVppAppRequest is request for MacOsVppApp
type MacOsVppAppRequest struct{ BaseRequest }

// Do performs HTTP request for MacOsVppApp
func (r *MacOsVppAppRequest) Do(method, path string, reqObj interface{}) (resObj *MacOsVppApp, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for MacOsVppApp
func (r *MacOsVppAppRequest) Get() (*MacOsVppApp, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for MacOsVppApp
func (r *MacOsVppAppRequest) Update(reqObj *MacOsVppApp) (*MacOsVppApp, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for MacOsVppApp
func (r *MacOsVppAppRequest) Delete() error {
	return r.JSONRequest("DELETE", "", nil, nil)
}

// AssignedLicenses returns request builder for MacOsVppAppAssignedLicense collection
func (b *MacOsVppAppRequestBuilder) AssignedLicenses() *MacOsVppAppAssignedLicensesCollectionRequestBuilder {
	bb := &MacOsVppAppAssignedLicensesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignedLicenses"
	return bb
}

// MacOsVppAppAssignedLicensesCollectionRequestBuilder is request builder for MacOsVppAppAssignedLicense collection
type MacOsVppAppAssignedLicensesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for MacOsVppAppAssignedLicense collection
func (b *MacOsVppAppAssignedLicensesCollectionRequestBuilder) Request() *MacOsVppAppAssignedLicensesCollectionRequest {
	return &MacOsVppAppAssignedLicensesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for MacOsVppAppAssignedLicense item
func (b *MacOsVppAppAssignedLicensesCollectionRequestBuilder) ID(id string) *MacOsVppAppAssignedLicenseRequestBuilder {
	bb := &MacOsVppAppAssignedLicenseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// MacOsVppAppAssignedLicensesCollectionRequest is request for MacOsVppAppAssignedLicense collection
type MacOsVppAppAssignedLicensesCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for MacOsVppAppAssignedLicense collection
func (r *MacOsVppAppAssignedLicensesCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *MacOsVppAppAssignedLicense, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for MacOsVppAppAssignedLicense collection
func (r *MacOsVppAppAssignedLicensesCollectionRequest) Paging(method, path string, obj interface{}) ([]MacOsVppAppAssignedLicense, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []MacOsVppAppAssignedLicense
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []MacOsVppAppAssignedLicense
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for MacOsVppAppAssignedLicense collection
func (r *MacOsVppAppAssignedLicensesCollectionRequest) Get() ([]MacOsVppAppAssignedLicense, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for MacOsVppAppAssignedLicense collection
func (r *MacOsVppAppAssignedLicensesCollectionRequest) Add(reqObj *MacOsVppAppAssignedLicense) (*MacOsVppAppAssignedLicense, error) {
	return r.Do("POST", "", reqObj)
}
