// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// SensitivityLabelRequestBuilder is request builder for SensitivityLabel
type SensitivityLabelRequestBuilder struct{ BaseRequestBuilder }

// Request returns SensitivityLabelRequest
func (b *SensitivityLabelRequestBuilder) Request() *SensitivityLabelRequest {
	return &SensitivityLabelRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// SensitivityLabelRequest is request for SensitivityLabel
type SensitivityLabelRequest struct{ BaseRequest }

// Do performs HTTP request for SensitivityLabel
func (r *SensitivityLabelRequest) Do(method, path string, reqObj interface{}) (resObj *SensitivityLabel, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for SensitivityLabel
func (r *SensitivityLabelRequest) Get() (*SensitivityLabel, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for SensitivityLabel
func (r *SensitivityLabelRequest) Update(reqObj *SensitivityLabel) (*SensitivityLabel, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for SensitivityLabel
func (r *SensitivityLabelRequest) Delete() error {
	return r.JSONRequest("DELETE", "", nil, nil)
}

// Sublabels returns request builder for SensitivityLabel collection
func (b *SensitivityLabelRequestBuilder) Sublabels() *SensitivityLabelSublabelsCollectionRequestBuilder {
	bb := &SensitivityLabelSublabelsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/sublabels"
	return bb
}

// SensitivityLabelSublabelsCollectionRequestBuilder is request builder for SensitivityLabel collection
type SensitivityLabelSublabelsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for SensitivityLabel collection
func (b *SensitivityLabelSublabelsCollectionRequestBuilder) Request() *SensitivityLabelSublabelsCollectionRequest {
	return &SensitivityLabelSublabelsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for SensitivityLabel item
func (b *SensitivityLabelSublabelsCollectionRequestBuilder) ID(id string) *SensitivityLabelRequestBuilder {
	bb := &SensitivityLabelRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// SensitivityLabelSublabelsCollectionRequest is request for SensitivityLabel collection
type SensitivityLabelSublabelsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for SensitivityLabel collection
func (r *SensitivityLabelSublabelsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *SensitivityLabel, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for SensitivityLabel collection
func (r *SensitivityLabelSublabelsCollectionRequest) Paging(method, path string, obj interface{}) ([]SensitivityLabel, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []SensitivityLabel
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []SensitivityLabel
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for SensitivityLabel collection
func (r *SensitivityLabelSublabelsCollectionRequest) Get() ([]SensitivityLabel, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for SensitivityLabel collection
func (r *SensitivityLabelSublabelsCollectionRequest) Add(reqObj *SensitivityLabel) (*SensitivityLabel, error) {
	return r.Do("POST", "", reqObj)
}
