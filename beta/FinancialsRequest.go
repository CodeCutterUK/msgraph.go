// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// FinancialsRequestBuilder is request builder for Financials
type FinancialsRequestBuilder struct{ BaseRequestBuilder }

// Request returns FinancialsRequest
func (b *FinancialsRequestBuilder) Request() *FinancialsRequest {
	return &FinancialsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// FinancialsRequest is request for Financials
type FinancialsRequest struct{ BaseRequest }

// Do performs HTTP request for Financials
func (r *FinancialsRequest) Do(method, path string, reqObj interface{}) (resObj *Financials, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for Financials
func (r *FinancialsRequest) Get() (*Financials, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for Financials
func (r *FinancialsRequest) Update(reqObj *Financials) (*Financials, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for Financials
func (r *FinancialsRequest) Delete() error {
	return r.JSONRequest("DELETE", "", nil, nil)
}

// Companies returns request builder for Company collection
func (b *FinancialsRequestBuilder) Companies() *FinancialsCompaniesCollectionRequestBuilder {
	bb := &FinancialsCompaniesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/companies"
	return bb
}

// FinancialsCompaniesCollectionRequestBuilder is request builder for Company collection
type FinancialsCompaniesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Company collection
func (b *FinancialsCompaniesCollectionRequestBuilder) Request() *FinancialsCompaniesCollectionRequest {
	return &FinancialsCompaniesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Company item
func (b *FinancialsCompaniesCollectionRequestBuilder) ID(id string) *CompanyRequestBuilder {
	bb := &CompanyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// FinancialsCompaniesCollectionRequest is request for Company collection
type FinancialsCompaniesCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for Company collection
func (r *FinancialsCompaniesCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *Company, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for Company collection
func (r *FinancialsCompaniesCollectionRequest) Paging(method, path string, obj interface{}) ([]Company, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Company
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []Company
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for Company collection
func (r *FinancialsCompaniesCollectionRequest) Get() ([]Company, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for Company collection
func (r *FinancialsCompaniesCollectionRequest) Add(reqObj *Company) (*Company, error) {
	return r.Do("POST", "", reqObj)
}
