// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// BookingBusinessRequestBuilder is request builder for BookingBusiness
type BookingBusinessRequestBuilder struct{ BaseRequestBuilder }

// Request returns BookingBusinessRequest
func (b *BookingBusinessRequestBuilder) Request() *BookingBusinessRequest {
	return &BookingBusinessRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BookingBusinessRequest is request for BookingBusiness
type BookingBusinessRequest struct{ BaseRequest }

// Get performs GET request for BookingBusiness
func (r *BookingBusinessRequest) Get() (resObj *BookingBusiness, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest("GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BookingBusiness
func (r *BookingBusinessRequest) Update(reqObj *BookingBusiness) error {
	return r.JSONRequest("PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BookingBusiness
func (r *BookingBusinessRequest) Delete() error {
	return r.JSONRequest("DELETE", "", nil, nil)
}

// Appointments returns request builder for BookingAppointment collection
func (b *BookingBusinessRequestBuilder) Appointments() *BookingBusinessAppointmentsCollectionRequestBuilder {
	bb := &BookingBusinessAppointmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/appointments"
	return bb
}

// BookingBusinessAppointmentsCollectionRequestBuilder is request builder for BookingAppointment collection
type BookingBusinessAppointmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for BookingAppointment collection
func (b *BookingBusinessAppointmentsCollectionRequestBuilder) Request() *BookingBusinessAppointmentsCollectionRequest {
	return &BookingBusinessAppointmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for BookingAppointment item
func (b *BookingBusinessAppointmentsCollectionRequestBuilder) ID(id string) *BookingAppointmentRequestBuilder {
	bb := &BookingAppointmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// BookingBusinessAppointmentsCollectionRequest is request for BookingAppointment collection
type BookingBusinessAppointmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for BookingAppointment collection
func (r *BookingBusinessAppointmentsCollectionRequest) Paging(method, path string, obj interface{}) ([]BookingAppointment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []BookingAppointment
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []BookingAppointment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for BookingAppointment collection
func (r *BookingBusinessAppointmentsCollectionRequest) Get() ([]BookingAppointment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for BookingAppointment collection
func (r *BookingBusinessAppointmentsCollectionRequest) Add(reqObj *BookingAppointment) (resObj *BookingAppointment, err error) {
	err = r.JSONRequest("POST", "", reqObj, &resObj)
	return
}

// CalendarView returns request builder for BookingAppointment collection
func (b *BookingBusinessRequestBuilder) CalendarView() *BookingBusinessCalendarViewCollectionRequestBuilder {
	bb := &BookingBusinessCalendarViewCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/calendarView"
	return bb
}

// BookingBusinessCalendarViewCollectionRequestBuilder is request builder for BookingAppointment collection
type BookingBusinessCalendarViewCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for BookingAppointment collection
func (b *BookingBusinessCalendarViewCollectionRequestBuilder) Request() *BookingBusinessCalendarViewCollectionRequest {
	return &BookingBusinessCalendarViewCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for BookingAppointment item
func (b *BookingBusinessCalendarViewCollectionRequestBuilder) ID(id string) *BookingAppointmentRequestBuilder {
	bb := &BookingAppointmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// BookingBusinessCalendarViewCollectionRequest is request for BookingAppointment collection
type BookingBusinessCalendarViewCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for BookingAppointment collection
func (r *BookingBusinessCalendarViewCollectionRequest) Paging(method, path string, obj interface{}) ([]BookingAppointment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []BookingAppointment
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []BookingAppointment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for BookingAppointment collection
func (r *BookingBusinessCalendarViewCollectionRequest) Get() ([]BookingAppointment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for BookingAppointment collection
func (r *BookingBusinessCalendarViewCollectionRequest) Add(reqObj *BookingAppointment) (resObj *BookingAppointment, err error) {
	err = r.JSONRequest("POST", "", reqObj, &resObj)
	return
}

// Customers returns request builder for BookingCustomer collection
func (b *BookingBusinessRequestBuilder) Customers() *BookingBusinessCustomersCollectionRequestBuilder {
	bb := &BookingBusinessCustomersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/customers"
	return bb
}

// BookingBusinessCustomersCollectionRequestBuilder is request builder for BookingCustomer collection
type BookingBusinessCustomersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for BookingCustomer collection
func (b *BookingBusinessCustomersCollectionRequestBuilder) Request() *BookingBusinessCustomersCollectionRequest {
	return &BookingBusinessCustomersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for BookingCustomer item
func (b *BookingBusinessCustomersCollectionRequestBuilder) ID(id string) *BookingCustomerRequestBuilder {
	bb := &BookingCustomerRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// BookingBusinessCustomersCollectionRequest is request for BookingCustomer collection
type BookingBusinessCustomersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for BookingCustomer collection
func (r *BookingBusinessCustomersCollectionRequest) Paging(method, path string, obj interface{}) ([]BookingCustomer, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []BookingCustomer
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []BookingCustomer
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for BookingCustomer collection
func (r *BookingBusinessCustomersCollectionRequest) Get() ([]BookingCustomer, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for BookingCustomer collection
func (r *BookingBusinessCustomersCollectionRequest) Add(reqObj *BookingCustomer) (resObj *BookingCustomer, err error) {
	err = r.JSONRequest("POST", "", reqObj, &resObj)
	return
}

// Services returns request builder for BookingService collection
func (b *BookingBusinessRequestBuilder) Services() *BookingBusinessServicesCollectionRequestBuilder {
	bb := &BookingBusinessServicesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/services"
	return bb
}

// BookingBusinessServicesCollectionRequestBuilder is request builder for BookingService collection
type BookingBusinessServicesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for BookingService collection
func (b *BookingBusinessServicesCollectionRequestBuilder) Request() *BookingBusinessServicesCollectionRequest {
	return &BookingBusinessServicesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for BookingService item
func (b *BookingBusinessServicesCollectionRequestBuilder) ID(id string) *BookingServiceRequestBuilder {
	bb := &BookingServiceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// BookingBusinessServicesCollectionRequest is request for BookingService collection
type BookingBusinessServicesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for BookingService collection
func (r *BookingBusinessServicesCollectionRequest) Paging(method, path string, obj interface{}) ([]BookingService, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []BookingService
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []BookingService
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for BookingService collection
func (r *BookingBusinessServicesCollectionRequest) Get() ([]BookingService, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for BookingService collection
func (r *BookingBusinessServicesCollectionRequest) Add(reqObj *BookingService) (resObj *BookingService, err error) {
	err = r.JSONRequest("POST", "", reqObj, &resObj)
	return
}

// StaffMembers returns request builder for BookingStaffMember collection
func (b *BookingBusinessRequestBuilder) StaffMembers() *BookingBusinessStaffMembersCollectionRequestBuilder {
	bb := &BookingBusinessStaffMembersCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/staffMembers"
	return bb
}

// BookingBusinessStaffMembersCollectionRequestBuilder is request builder for BookingStaffMember collection
type BookingBusinessStaffMembersCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for BookingStaffMember collection
func (b *BookingBusinessStaffMembersCollectionRequestBuilder) Request() *BookingBusinessStaffMembersCollectionRequest {
	return &BookingBusinessStaffMembersCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for BookingStaffMember item
func (b *BookingBusinessStaffMembersCollectionRequestBuilder) ID(id string) *BookingStaffMemberRequestBuilder {
	bb := &BookingStaffMemberRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// BookingBusinessStaffMembersCollectionRequest is request for BookingStaffMember collection
type BookingBusinessStaffMembersCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for BookingStaffMember collection
func (r *BookingBusinessStaffMembersCollectionRequest) Paging(method, path string, obj interface{}) ([]BookingStaffMember, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []BookingStaffMember
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []BookingStaffMember
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for BookingStaffMember collection
func (r *BookingBusinessStaffMembersCollectionRequest) Get() ([]BookingStaffMember, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for BookingStaffMember collection
func (r *BookingBusinessStaffMembersCollectionRequest) Add(reqObj *BookingStaffMember) (resObj *BookingStaffMember, err error) {
	err = r.JSONRequest("POST", "", reqObj, &resObj)
	return
}
