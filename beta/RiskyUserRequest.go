// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// RiskyUserRequestBuilder is request builder for RiskyUser
type RiskyUserRequestBuilder struct{ BaseRequestBuilder }

// Request returns RiskyUserRequest
func (b *RiskyUserRequestBuilder) Request() *RiskyUserRequest {
	return &RiskyUserRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// RiskyUserRequest is request for RiskyUser
type RiskyUserRequest struct{ BaseRequest }

// Do performs HTTP request for RiskyUser
func (r *RiskyUserRequest) Do(method, path string, reqObj interface{}) (resObj *RiskyUser, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for RiskyUser
func (r *RiskyUserRequest) Get() (*RiskyUser, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for RiskyUser
func (r *RiskyUserRequest) Update(reqObj *RiskyUser) (*RiskyUser, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for RiskyUser
func (r *RiskyUserRequest) Delete() error {
	return r.JSONRequestWithPath("DELETE", "", nil, nil)
}

// History returns request builder for RiskyUserHistoryItem collection
func (b *RiskyUserRequestBuilder) History() *RiskyUserHistoryCollectionRequestBuilder {
	bb := &RiskyUserHistoryCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/history"
	return bb
}

// RiskyUserHistoryCollectionRequestBuilder is request builder for RiskyUserHistoryItem collection
type RiskyUserHistoryCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RiskyUserHistoryItem collection
func (b *RiskyUserHistoryCollectionRequestBuilder) Request() *RiskyUserHistoryCollectionRequest {
	return &RiskyUserHistoryCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RiskyUserHistoryItem item
func (b *RiskyUserHistoryCollectionRequestBuilder) ID(id string) *RiskyUserHistoryItemRequestBuilder {
	bb := &RiskyUserHistoryItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RiskyUserHistoryCollectionRequest is request for RiskyUserHistoryItem collection
type RiskyUserHistoryCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for RiskyUserHistoryItem collection
func (r *RiskyUserHistoryCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *RiskyUserHistoryItem, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for RiskyUserHistoryItem collection
func (r *RiskyUserHistoryCollectionRequest) Paging(method, path string, obj interface{}) ([]RiskyUserHistoryItem, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RiskyUserHistoryItem
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []RiskyUserHistoryItem
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for RiskyUserHistoryItem collection
func (r *RiskyUserHistoryCollectionRequest) Get() ([]RiskyUserHistoryItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for RiskyUserHistoryItem collection
func (r *RiskyUserHistoryCollectionRequest) Add(reqObj *RiskyUserHistoryItem) (*RiskyUserHistoryItem, error) {
	return r.Do("POST", "", reqObj)
}
