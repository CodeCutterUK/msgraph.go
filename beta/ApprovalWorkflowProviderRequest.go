// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// ApprovalWorkflowProviderRequestBuilder is request builder for ApprovalWorkflowProvider
type ApprovalWorkflowProviderRequestBuilder struct{ BaseRequestBuilder }

// Request returns ApprovalWorkflowProviderRequest
func (b *ApprovalWorkflowProviderRequestBuilder) Request() *ApprovalWorkflowProviderRequest {
	return &ApprovalWorkflowProviderRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ApprovalWorkflowProviderRequest is request for ApprovalWorkflowProvider
type ApprovalWorkflowProviderRequest struct{ BaseRequest }

// Do performs HTTP request for ApprovalWorkflowProvider
func (r *ApprovalWorkflowProviderRequest) Do(method, path string, reqObj interface{}) (resObj *ApprovalWorkflowProvider, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for ApprovalWorkflowProvider
func (r *ApprovalWorkflowProviderRequest) Get() (*ApprovalWorkflowProvider, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for ApprovalWorkflowProvider
func (r *ApprovalWorkflowProviderRequest) Update(reqObj *ApprovalWorkflowProvider) (*ApprovalWorkflowProvider, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for ApprovalWorkflowProvider
func (r *ApprovalWorkflowProviderRequest) Delete() error {
	return r.JSONRequestWithPath("DELETE", "", nil, nil)
}

// BusinessFlows returns request builder for BusinessFlow collection
func (b *ApprovalWorkflowProviderRequestBuilder) BusinessFlows() *ApprovalWorkflowProviderBusinessFlowsCollectionRequestBuilder {
	bb := &ApprovalWorkflowProviderBusinessFlowsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/businessFlows"
	return bb
}

// ApprovalWorkflowProviderBusinessFlowsCollectionRequestBuilder is request builder for BusinessFlow collection
type ApprovalWorkflowProviderBusinessFlowsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for BusinessFlow collection
func (b *ApprovalWorkflowProviderBusinessFlowsCollectionRequestBuilder) Request() *ApprovalWorkflowProviderBusinessFlowsCollectionRequest {
	return &ApprovalWorkflowProviderBusinessFlowsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for BusinessFlow item
func (b *ApprovalWorkflowProviderBusinessFlowsCollectionRequestBuilder) ID(id string) *BusinessFlowRequestBuilder {
	bb := &BusinessFlowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ApprovalWorkflowProviderBusinessFlowsCollectionRequest is request for BusinessFlow collection
type ApprovalWorkflowProviderBusinessFlowsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for BusinessFlow collection
func (r *ApprovalWorkflowProviderBusinessFlowsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *BusinessFlow, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for BusinessFlow collection
func (r *ApprovalWorkflowProviderBusinessFlowsCollectionRequest) Paging(method, path string, obj interface{}) ([]BusinessFlow, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []BusinessFlow
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []BusinessFlow
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for BusinessFlow collection
func (r *ApprovalWorkflowProviderBusinessFlowsCollectionRequest) Get() ([]BusinessFlow, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for BusinessFlow collection
func (r *ApprovalWorkflowProviderBusinessFlowsCollectionRequest) Add(reqObj *BusinessFlow) (*BusinessFlow, error) {
	return r.Do("POST", "", reqObj)
}

// BusinessFlowsWithRequestsAwaitingMyDecision returns request builder for BusinessFlow collection
func (b *ApprovalWorkflowProviderRequestBuilder) BusinessFlowsWithRequestsAwaitingMyDecision() *ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequestBuilder {
	bb := &ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/businessFlowsWithRequestsAwaitingMyDecision"
	return bb
}

// ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequestBuilder is request builder for BusinessFlow collection
type ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for BusinessFlow collection
func (b *ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequestBuilder) Request() *ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequest {
	return &ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for BusinessFlow item
func (b *ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequestBuilder) ID(id string) *BusinessFlowRequestBuilder {
	bb := &BusinessFlowRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequest is request for BusinessFlow collection
type ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for BusinessFlow collection
func (r *ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *BusinessFlow, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for BusinessFlow collection
func (r *ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequest) Paging(method, path string, obj interface{}) ([]BusinessFlow, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []BusinessFlow
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []BusinessFlow
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for BusinessFlow collection
func (r *ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequest) Get() ([]BusinessFlow, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for BusinessFlow collection
func (r *ApprovalWorkflowProviderBusinessFlowsWithRequestsAwaitingMyDecisionCollectionRequest) Add(reqObj *BusinessFlow) (*BusinessFlow, error) {
	return r.Do("POST", "", reqObj)
}

// PolicyTemplates returns request builder for GovernancePolicyTemplate collection
func (b *ApprovalWorkflowProviderRequestBuilder) PolicyTemplates() *ApprovalWorkflowProviderPolicyTemplatesCollectionRequestBuilder {
	bb := &ApprovalWorkflowProviderPolicyTemplatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/policyTemplates"
	return bb
}

// ApprovalWorkflowProviderPolicyTemplatesCollectionRequestBuilder is request builder for GovernancePolicyTemplate collection
type ApprovalWorkflowProviderPolicyTemplatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for GovernancePolicyTemplate collection
func (b *ApprovalWorkflowProviderPolicyTemplatesCollectionRequestBuilder) Request() *ApprovalWorkflowProviderPolicyTemplatesCollectionRequest {
	return &ApprovalWorkflowProviderPolicyTemplatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for GovernancePolicyTemplate item
func (b *ApprovalWorkflowProviderPolicyTemplatesCollectionRequestBuilder) ID(id string) *GovernancePolicyTemplateRequestBuilder {
	bb := &GovernancePolicyTemplateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ApprovalWorkflowProviderPolicyTemplatesCollectionRequest is request for GovernancePolicyTemplate collection
type ApprovalWorkflowProviderPolicyTemplatesCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for GovernancePolicyTemplate collection
func (r *ApprovalWorkflowProviderPolicyTemplatesCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *GovernancePolicyTemplate, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for GovernancePolicyTemplate collection
func (r *ApprovalWorkflowProviderPolicyTemplatesCollectionRequest) Paging(method, path string, obj interface{}) ([]GovernancePolicyTemplate, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []GovernancePolicyTemplate
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []GovernancePolicyTemplate
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for GovernancePolicyTemplate collection
func (r *ApprovalWorkflowProviderPolicyTemplatesCollectionRequest) Get() ([]GovernancePolicyTemplate, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for GovernancePolicyTemplate collection
func (r *ApprovalWorkflowProviderPolicyTemplatesCollectionRequest) Add(reqObj *GovernancePolicyTemplate) (*GovernancePolicyTemplate, error) {
	return r.Do("POST", "", reqObj)
}

// Requests returns request builder for RequestObject collection
func (b *ApprovalWorkflowProviderRequestBuilder) Requests() *ApprovalWorkflowProviderRequestsCollectionRequestBuilder {
	bb := &ApprovalWorkflowProviderRequestsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/requests"
	return bb
}

// ApprovalWorkflowProviderRequestsCollectionRequestBuilder is request builder for RequestObject collection
type ApprovalWorkflowProviderRequestsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RequestObject collection
func (b *ApprovalWorkflowProviderRequestsCollectionRequestBuilder) Request() *ApprovalWorkflowProviderRequestsCollectionRequest {
	return &ApprovalWorkflowProviderRequestsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RequestObject item
func (b *ApprovalWorkflowProviderRequestsCollectionRequestBuilder) ID(id string) *RequestObjectRequestBuilder {
	bb := &RequestObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ApprovalWorkflowProviderRequestsCollectionRequest is request for RequestObject collection
type ApprovalWorkflowProviderRequestsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for RequestObject collection
func (r *ApprovalWorkflowProviderRequestsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *RequestObject, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for RequestObject collection
func (r *ApprovalWorkflowProviderRequestsCollectionRequest) Paging(method, path string, obj interface{}) ([]RequestObject, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RequestObject
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []RequestObject
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for RequestObject collection
func (r *ApprovalWorkflowProviderRequestsCollectionRequest) Get() ([]RequestObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for RequestObject collection
func (r *ApprovalWorkflowProviderRequestsCollectionRequest) Add(reqObj *RequestObject) (*RequestObject, error) {
	return r.Do("POST", "", reqObj)
}

// RequestsAwaitingMyDecision returns request builder for RequestObject collection
func (b *ApprovalWorkflowProviderRequestBuilder) RequestsAwaitingMyDecision() *ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequestBuilder {
	bb := &ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/requestsAwaitingMyDecision"
	return bb
}

// ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequestBuilder is request builder for RequestObject collection
type ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for RequestObject collection
func (b *ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequestBuilder) Request() *ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequest {
	return &ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for RequestObject item
func (b *ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequestBuilder) ID(id string) *RequestObjectRequestBuilder {
	bb := &RequestObjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequest is request for RequestObject collection
type ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for RequestObject collection
func (r *ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *RequestObject, err error) {
	err = r.JSONRequestWithPath(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for RequestObject collection
func (r *ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequest) Paging(method, path string, obj interface{}) ([]RequestObject, error) {
	req, err := r.NewJSONRequestWithPath(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []RequestObject
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []RequestObject
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for RequestObject collection
func (r *ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequest) Get() ([]RequestObject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for RequestObject collection
func (r *ApprovalWorkflowProviderRequestsAwaitingMyDecisionCollectionRequest) Add(reqObj *RequestObject) (*RequestObject, error) {
	return r.Do("POST", "", reqObj)
}
