// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// RoomListRequestBuilder is request builder for RoomList
type RoomListRequestBuilder struct{ BaseRequestBuilder }

// Request returns RoomListRequest
func (b *RoomListRequestBuilder) Request() *RoomListRequest {
	return &RoomListRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// RoomListRequest is request for RoomList
type RoomListRequest struct{ BaseRequest }

// Do performs HTTP request for RoomList
func (r *RoomListRequest) Do(method, path string, reqObj interface{}) (resObj *RoomList, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for RoomList
func (r *RoomListRequest) Get() (*RoomList, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for RoomList
func (r *RoomListRequest) Update(reqObj *RoomList) (*RoomList, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for RoomList
func (r *RoomListRequest) Delete() error {
	return r.JSONRequest("DELETE", "", nil, nil)
}

// Rooms returns request builder for Room collection
func (b *RoomListRequestBuilder) Rooms() *RoomListRoomsCollectionRequestBuilder {
	bb := &RoomListRoomsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rooms"
	return bb
}

// RoomListRoomsCollectionRequestBuilder is request builder for Room collection
type RoomListRoomsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for Room collection
func (b *RoomListRoomsCollectionRequestBuilder) Request() *RoomListRoomsCollectionRequest {
	return &RoomListRoomsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for Room item
func (b *RoomListRoomsCollectionRequestBuilder) ID(id string) *RoomRequestBuilder {
	bb := &RoomRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RoomListRoomsCollectionRequest is request for Room collection
type RoomListRoomsCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for Room collection
func (r *RoomListRoomsCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *Room, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for Room collection
func (r *RoomListRoomsCollectionRequest) Paging(method, path string, obj interface{}) ([]Room, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Room
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []Room
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for Room collection
func (r *RoomListRoomsCollectionRequest) Get() ([]Room, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for Room collection
func (r *RoomListRoomsCollectionRequest) Add(reqObj *Room) (*Room, error) {
	return r.Do("POST", "", reqObj)
}
