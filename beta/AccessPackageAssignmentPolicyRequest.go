// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// AccessPackageAssignmentPolicyRequestBuilder is request builder for AccessPackageAssignmentPolicy
type AccessPackageAssignmentPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns AccessPackageAssignmentPolicyRequest
func (b *AccessPackageAssignmentPolicyRequestBuilder) Request() *AccessPackageAssignmentPolicyRequest {
	return &AccessPackageAssignmentPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AccessPackageAssignmentPolicyRequest is request for AccessPackageAssignmentPolicy
type AccessPackageAssignmentPolicyRequest struct{ BaseRequest }

// Get performs GET request for AccessPackageAssignmentPolicy
func (r *AccessPackageAssignmentPolicyRequest) Get() (resObj *AccessPackageAssignmentPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest("GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AccessPackageAssignmentPolicy
func (r *AccessPackageAssignmentPolicyRequest) Update(reqObj *AccessPackageAssignmentPolicy) error {
	return r.JSONRequest("PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AccessPackageAssignmentPolicy
func (r *AccessPackageAssignmentPolicyRequest) Delete() error {
	return r.JSONRequest("DELETE", "", nil, nil)
}

// AccessPackage is navigation property
func (b *AccessPackageAssignmentPolicyRequestBuilder) AccessPackage() *AccessPackageRequestBuilder {
	bb := &AccessPackageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/accessPackage"
	return bb
}

// AccessPackageCatalog is navigation property
func (b *AccessPackageAssignmentPolicyRequestBuilder) AccessPackageCatalog() *AccessPackageCatalogRequestBuilder {
	bb := &AccessPackageCatalogRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/accessPackageCatalog"
	return bb
}

// Approvers returns request builder for AccessPackageSubject collection
func (b *AccessPackageAssignmentPolicyRequestBuilder) Approvers() *AccessPackageAssignmentPolicyApproversCollectionRequestBuilder {
	bb := &AccessPackageAssignmentPolicyApproversCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/approvers"
	return bb
}

// AccessPackageAssignmentPolicyApproversCollectionRequestBuilder is request builder for AccessPackageSubject collection
type AccessPackageAssignmentPolicyApproversCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessPackageSubject collection
func (b *AccessPackageAssignmentPolicyApproversCollectionRequestBuilder) Request() *AccessPackageAssignmentPolicyApproversCollectionRequest {
	return &AccessPackageAssignmentPolicyApproversCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessPackageSubject item
func (b *AccessPackageAssignmentPolicyApproversCollectionRequestBuilder) ID(id string) *AccessPackageSubjectRequestBuilder {
	bb := &AccessPackageSubjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageAssignmentPolicyApproversCollectionRequest is request for AccessPackageSubject collection
type AccessPackageAssignmentPolicyApproversCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessPackageSubject collection
func (r *AccessPackageAssignmentPolicyApproversCollectionRequest) Paging(method, path string, obj interface{}) ([]AccessPackageSubject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackageSubject
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []AccessPackageSubject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for AccessPackageSubject collection
func (r *AccessPackageAssignmentPolicyApproversCollectionRequest) Get() ([]AccessPackageSubject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for AccessPackageSubject collection
func (r *AccessPackageAssignmentPolicyApproversCollectionRequest) Add(reqObj *AccessPackageSubject) (resObj *AccessPackageSubject, err error) {
	err = r.JSONRequest("POST", "", reqObj, &resObj)
	return
}

// SubjectsScope returns request builder for AccessPackageSubject collection
func (b *AccessPackageAssignmentPolicyRequestBuilder) SubjectsScope() *AccessPackageAssignmentPolicySubjectsScopeCollectionRequestBuilder {
	bb := &AccessPackageAssignmentPolicySubjectsScopeCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/subjectsScope"
	return bb
}

// AccessPackageAssignmentPolicySubjectsScopeCollectionRequestBuilder is request builder for AccessPackageSubject collection
type AccessPackageAssignmentPolicySubjectsScopeCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessPackageSubject collection
func (b *AccessPackageAssignmentPolicySubjectsScopeCollectionRequestBuilder) Request() *AccessPackageAssignmentPolicySubjectsScopeCollectionRequest {
	return &AccessPackageAssignmentPolicySubjectsScopeCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessPackageSubject item
func (b *AccessPackageAssignmentPolicySubjectsScopeCollectionRequestBuilder) ID(id string) *AccessPackageSubjectRequestBuilder {
	bb := &AccessPackageSubjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// AccessPackageAssignmentPolicySubjectsScopeCollectionRequest is request for AccessPackageSubject collection
type AccessPackageAssignmentPolicySubjectsScopeCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessPackageSubject collection
func (r *AccessPackageAssignmentPolicySubjectsScopeCollectionRequest) Paging(method, path string, obj interface{}) ([]AccessPackageSubject, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessPackageSubject
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []AccessPackageSubject
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for AccessPackageSubject collection
func (r *AccessPackageAssignmentPolicySubjectsScopeCollectionRequest) Get() ([]AccessPackageSubject, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for AccessPackageSubject collection
func (r *AccessPackageAssignmentPolicySubjectsScopeCollectionRequest) Add(reqObj *AccessPackageSubject) (resObj *AccessPackageSubject, err error) {
	err = r.JSONRequest("POST", "", reqObj, &resObj)
	return
}
