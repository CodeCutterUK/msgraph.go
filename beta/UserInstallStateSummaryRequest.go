// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
)

// UserInstallStateSummaryRequestBuilder is request builder for UserInstallStateSummary
type UserInstallStateSummaryRequestBuilder struct{ BaseRequestBuilder }

// Request returns UserInstallStateSummaryRequest
func (b *UserInstallStateSummaryRequestBuilder) Request() *UserInstallStateSummaryRequest {
	return &UserInstallStateSummaryRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UserInstallStateSummaryRequest is request for UserInstallStateSummary
type UserInstallStateSummaryRequest struct{ BaseRequest }

// Do performs HTTP request for UserInstallStateSummary
func (r *UserInstallStateSummaryRequest) Do(method, path string, reqObj interface{}) (resObj *UserInstallStateSummary, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Get performs GET request for UserInstallStateSummary
func (r *UserInstallStateSummaryRequest) Get() (*UserInstallStateSummary, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Do("GET", query, nil)
}

// Update performs PATCH request for UserInstallStateSummary
func (r *UserInstallStateSummaryRequest) Update(reqObj *UserInstallStateSummary) (*UserInstallStateSummary, error) {
	return r.Do("PATCH", "", reqObj)
}

// Delete performs DELETE request for UserInstallStateSummary
func (r *UserInstallStateSummaryRequest) Delete() error {
	return r.JSONRequest("DELETE", "", nil, nil)
}

// DeviceStates returns request builder for DeviceInstallState collection
func (b *UserInstallStateSummaryRequestBuilder) DeviceStates() *UserInstallStateSummaryDeviceStatesCollectionRequestBuilder {
	bb := &UserInstallStateSummaryDeviceStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceStates"
	return bb
}

// UserInstallStateSummaryDeviceStatesCollectionRequestBuilder is request builder for DeviceInstallState collection
type UserInstallStateSummaryDeviceStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for DeviceInstallState collection
func (b *UserInstallStateSummaryDeviceStatesCollectionRequestBuilder) Request() *UserInstallStateSummaryDeviceStatesCollectionRequest {
	return &UserInstallStateSummaryDeviceStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for DeviceInstallState item
func (b *UserInstallStateSummaryDeviceStatesCollectionRequestBuilder) ID(id string) *DeviceInstallStateRequestBuilder {
	bb := &DeviceInstallStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// UserInstallStateSummaryDeviceStatesCollectionRequest is request for DeviceInstallState collection
type UserInstallStateSummaryDeviceStatesCollectionRequest struct{ BaseRequest }

// Do performs HTTP request for DeviceInstallState collection
func (r *UserInstallStateSummaryDeviceStatesCollectionRequest) Do(method, path string, reqObj interface{}) (resObj *DeviceInstallState, err error) {
	err = r.JSONRequest(method, path, reqObj, &resObj)
	return
}

// Paging perfoms paging operation for DeviceInstallState collection
func (r *UserInstallStateSummaryDeviceStatesCollectionRequest) Paging(method, path string, obj interface{}) ([]DeviceInstallState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []DeviceInstallState
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			return nil, fmt.Errorf("%s: %s", res.Status, string(b))
		}
		var (
			paging Paging
			value  []DeviceInstallState
		)
		err := json.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = json.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		res, err = r.client.Get(paging.NextLink)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for DeviceInstallState collection
func (r *UserInstallStateSummaryDeviceStatesCollectionRequest) Get() ([]DeviceInstallState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging("GET", query, nil)
}

// Add performs POST request for DeviceInstallState collection
func (r *UserInstallStateSummaryDeviceStatesCollectionRequest) Add(reqObj *DeviceInstallState) (*DeviceInstallState, error) {
	return r.Do("POST", "", reqObj)
}
